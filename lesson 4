#lesson 04
#字典和集合基础
d1 = {'name': 'jason', 'age': 20, 'gender': 'male'}
d2 = dict({'name': 'jason', 'age': 20, 'gender': 'male'})
d3 = dict([('name', 'jason'), ('age', 20), ('gender', 'male')])
d4 = dict(name='jason', age=20, gender='male') 
d1 == d2 == d3 ==d4
#True

s1 = {1, 2, 3}
s2 = set([1, 2, 3])
s1 == s2 #print(s1 == s2)
#True

#查找产品价格,遍历列表
#list version
def find_product_price(products,product_id):
    for id,price in products:
        if id == product_id:
            return price
    return None

products = [
    (143121312,100),
    (432314553,30),
    (32421912367,150)    
]
print('the price of product 432314553 is {}'.format(find_product_price(products,432314553)))

#查找产品价格,字典方式
#dict version
products = {
    '143121312':100,
    '432314553':30,
    '32421912367':150
}
print('the price of product 432314553 is {}'.format(products['432314553']))

#商品有多少种不同的价格
#list version
def find_unique_price_using_list(products):
    unique_price_list = []
    for _,price in products:
        if price not in unique_price_list:
            unique_price_list.append(price)
    return len(unique_price_list)

products = [
    (143121312,100),
    (432314553,30),
    (32421912367,150),    
    (937153201,30)   
]

print('number of unique price is {}'.format(find_unique_price_using_list(products)))

#商品有多少种不同的价格
#set version
def find_unique_price_using_set(products):
    unique_price_set = set()
    for _,price in products:
        unique_price_set.add(price)
    return len(unique_price_set)

products = [
    (143121312,100),
    (432314553,30),
    (32421912367,150),    
    (937153201,30)   
]
print('number of unique price is {}'.format(find_unique_price_using_set(products)))



#coding=gbk	
#初始化了含有 100,000 个元素的产品，并分别计算了使用列表和集合来统计产品价格数量的运行时间
import time
id = [x for x in range(0,100000)]
price = [x for x in range(200000,300000)]
products = list(zip(id,price))

stat_using_list = time.perf_counter()
find_unique_price_using_list(products)
end_using_list = time.perf_counter()
print('list time is {}'.format(end_using_list -stat_using_list))

stat_using_set = time.perf_counter()
find_unique_price_using_set(products)
end_using_set = time.perf_counter()
print('set time is {}'.format(end_using_set - stat_using_set))
#输出
#list time is 155.36729795600002
#set time is 0.022356752000007418
