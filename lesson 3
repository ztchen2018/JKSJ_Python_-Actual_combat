l = [1, 2, 'hello', 'world'] # 列表中同时含有int和string类型的元素
tuple = ('jason', 22) # 元组中同时含有int和string类型的元素

#修改list
l = [1,2,3,4]
l[3] = 40

#列表和元组添加元素
l.append(5)
new_tuple = tuple + (5,)

#倒数索引
l[-1]
tuple[-1]

#切片
l[1:3]  # 返回列表中索引从1到2的子列表
tuple[1:3]  # 返回元组中索引从1到2的子元组

#嵌套
l = [[1,2,3],[4,5]]  # 列表的每一个元素也是一个列表
tuple = ((1,2,3),(4,5))   # 元组的每一个元素也是一个元组

#内置函数
l = [3, 2, 3, 7, 8, 1]
l.count(3)   #count(item) 表示统计列表 / 元组中 item 出现的次数。
#2
l.index(7)   #index(item) 表示返回列表 / 元组中 item 第一次出现的索引。
#3
l.reverse()    #list.reverse() 原地倒转列表（注意，元组没有内置的这两个函数)。
l
#[1, 8, 7, 3, 2, 3]
l.sort()    # list.sort()和排序 
l
#[1, 2, 3, 3, 7, 8]

tup = (3, 2, 3, 7, 8, 1)
tup.count(3)
#2
tup.index(7)
#3
list(reversed(tup))
[1, 8, 7, 3, 2, 3]
sorted(tup)
#[1, 2, 3, 3, 7, 8]


#列表和元组存储方式的差异
l = []
l.__sizeof__() // 空列表的存储空间为40字节
#40
l.append(1)
l.__sizeof__() 
#72 // 加入了元素1之后，列表为其分配了可以存储4个元素的空间 (72 - 40)/8 = 4
l.append(2) 
l.__sizeof__()
#72 // 由于之前分配了空间，所以加入元素2，列表空间不变
l.append(3)
l.__sizeof__() 
#72 // 同上
l.append(4)
l.__sizeof__() 
#72 // 同上
l.append(5)
l.__sizeof__() 
#104 // 加入元素5之后，列表的空间不足，所以又额外分配了可以存储4个元素的空间
